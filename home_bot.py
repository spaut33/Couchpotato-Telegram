#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import subprocess
import re
import platform
import pickle
from datetime import datetime, date, time
from functools import wraps
from telegram.ext import Updater, CommandHandler, MessageHandler
from telegram.ext import BaseFilter, Filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ChatAction, ParseMode, KeyboardButton
from settings import Settings


# Logging Configuration
logging.basicConfig(
    format=u'%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)


# Restricted access decorator
# We are going to check user_id with allowed users from settings
def restricted(func):
    @wraps(func)
    def wrapped(bot, update, *args, **kwargs):
        try:
            user_id = update.message.from_user.id
        except (NameError, AttributeError):
            try:
                user_id = update.inline_query.from_user.id
            except (NameError, AttributeError):
                try:
                    user_id = update.chosen_inline_result.from_user.id
                except (NameError, AttributeError):
                    try:
                        user_id = update.callback_query.from_user.id
                    except (NameError, AttributeError):
                        logger.warn("No user_id available in update.")
                        return
        if user_id not in Settings.admin_ids:
            logger.warn(u"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. UID: " + str(user_id))
            bot.sendMessage(chat_id=update.message.chat_id,
                            text=u"–î–æ—Å—Ç—É–ø –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º " +
                            "–∑–∞–ø—Ä–µ—â–µ–Ω!\n" +
                            "https://www.youtube.com/watch?v=D1FWk_DP7rU")
            return
        return func(bot, update, *args, **kwargs)
    return wrapped


class CP:

    @restricted
    def avail(bot, update):
        result = CP.api_request('media.list', '?release_status=available&status=active')
        logger.info("Couchpotato –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –∑–∞–∫–∞—á–∫–µ —Ñ–∏–ª—å–º–æ–≤")
        if result:
            bot.sendChatAction(chat_id=update.message.chat_id,
                               action=ChatAction.TYPING)
            for sublist in result['movies']:
                logger.info('Couchpotato –Ω–∞—à–ª–∞: "' + sublist['title'] + '" ID: ' + sublist['releases'][0]['media_id'])
                output = sublist['title'] + ' ' + \
                    str(sublist['info']['year']) + '\n'
                keyboard = [[InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", callback_data='dow_' + sublist['identifiers']['imdb']),
                             InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_' + sublist['releases'][0]['media_id'])]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                # bot.sendPhoto(chat_id=update.message.chat_id, photo=open(sublist['files']['image_poster'][0], 'rb'))
                bot.sendMessage(chat_id=update.message.chat_id,
                                text=output, reply_markup=reply_markup)
            with open('cache/cp_avail_' +
                      str(update.message.chat_id), 'wb') as cache:
                pickle.dump(result['movies'], cache)
        else:
            logger.error(u"–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç media.list")

    @restricted
    def button(bot, update):
        q = update.callback_query
        action = q.data[:4]
        movie_id = q.data[4:]
        button_list = []
        output = ''
        max_entries = 5

        with open('cache/cp_avail_' + str(q.message.chat_id), 'rb') as cache:
            movies = pickle.load(cache)

        if (action == 'dow_'):
            if movies:
                logger.info(
                    '–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ª–∏–∑—ã –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: ' +
                    movie_id)
                for entry in movies:
                    if movie_id == entry['identifiers']['imdb']:
                        movie_title = entry['info']['titles'][0] + ' ' + \
                            str(entry['info']['year'])
                        logger.info('–§–∏–ª—å–º ' + movie_id +
                                    ' –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ª–∏–∑—ã')
                        i = 1
                        output = output + '<b>' + movie_title + '</b>\n'
                        for release in entry['releases']:
                            output = output + \
                                '<b>' + str(i) + '. üíø' + \
                                release['info']['name'] + \
                                release['info']['protocol'] + '</b>\n' + \
                                str(release['info']['size']) + 'Mb | ' + \
                                '<a href="' + release['info']['url'] + '">' + \
                                release['info']['provider'] + '</a>' + \
                                ' |score: ' + \
                                str(release['info']['score']) + '|‚á©' + \
                                str(release['info']['leechers']) + '|‚áß' + \
                                str(release['info']['seeders']) + \
                                '\n'
                            button_list.append(InlineKeyboardButton(str(i), callback_data='add_' + release['_id']))
                            reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=max_entries))
                            logger.info('–ù–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑: ' + release['info']['name'])
                            if i >= max_entries:
                                break
                            else:
                                i = i + 1
            else:
                error = u"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º cp_avail"
                logger.error(error)
                output = error
            bot.editMessageText(text=output,
                                chat_id=q.message.chat_id,
                                message_id=q.message.message_id,
                                parse_mode=ParseMode.HTML,
                                reply_markup=reply_markup)
        elif (action == 'del_'):
            logger.info('–£–¥–∞–ª—è–µ–º —Ä–µ–ª–∏–∑: ' + movie_id)
            if (CP.api_request('movie.delete', '?id=' + movie_id)):
                logger.info('–†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
                bot.editMessageText(text='–£–¥–∞–ª–µ–Ω–æ',
                                chat_id=q.message.chat_id,
                                message_id=q.message.message_id)
            else:
                logger.error('–†–µ–ª–∏–∑ –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ CP: ' + movie_id)
        elif (action == 'add_'):
            logger.info('–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∑–∞–∫–∞—á–∫—É —Ä–µ–ª–∏–∑: ' + movie_id)
            if (CP.api_request('release.manual_download', '?id=' + movie_id)):
                logger.info('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∑–∞–∫–∞—á–∫—É')
                bot.editMessageText(text='–†–µ–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∑–∞–∫–∞—á–∫—É',
                                chat_id=q.message.chat_id,
                                message_id=q.message.message_id)
            else:
                logger.error('–†–µ–ª–∏–∑ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∑–∞–∫–∞—á–∫—É: ' + movie_id)

    @restricted
    def query(bot, update):
        bot.sendChatAction(chat_id=update.message.chat_id,
                           action=ChatAction.TYPING)
        result = CP.api_request('search', '?q=' + update.message.text[3:])
        logger.info(
            u"Couchpotato –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: " +
            update.message.text[3:])
        if 'movies' in result:
            button_list = []
            film_list = ''
            n = 1
            for entry in result['movies']:
                year = entry['year']
                imdb_rating = entry['rating']['imdb'][0]
                imdb_votes = entry['rating']['imdb'][1]
                href = '<a href="http://imdb.com/title/' + \
                    entry['imdb'] + '/">'
                film_list += str(n) + '. '
                film_list += href + entry['titles'][0] + '</a> '
                film_list += str(year) + ' '
                film_list += '<i>' + str(imdb_rating)
                film_list += '/' + str(imdb_votes) + '</i>\n'
                button_text = entry['titles'][0] + ' ' + str(year)
                button_list.append(KeyboardButton(text=button_text))
                n = n + 1
                logger.info(u"Couchpotato –Ω–∞—à–ª–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: " +
                            entry['titles'][0] + " IMDB ID:" + entry['imdb'])
            with open('cache/cp_' +
                      str(update.message.chat_id), 'wb') as cache:
                pickle.dump(result['movies'], cache)
            output = u"<b>–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å–º—ã:</b>" + '\n' + film_list
            reply_markup = ReplyKeyboardMarkup(build_menu(button_list,
                                                          n_cols=1
                                                          ))
            bot.sendMessage(chat_id=update.message.chat_id,
                            text=output, reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML)
        else:
            output = u"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏—è."
            bot.sendMessage(chat_id=update.message.chat_id,
                            text=output)

    def api_request(action, query):
        import requests
        cp_url = 'http://{host}:{port}{dir}/api/{api}/{action}/{query}'.format(
            host=Settings.cp_hostname,
            port=Settings.cp_port,
            dir=Settings.cp_urlbase,
            api=Settings.cp_api,
            action=action,
            query=query)
        try:
            request = requests.get(cp_url, timeout=Settings.cp_timeout)
            # For test purposes only:
            # request = requests.get('http://pastebin.com/raw/FdRQb92H',
            # timeout=Settings.cp_timeout)
            if action == 'search' or action == 'media.list':
                return request.json()
            else:
                return request.json()['success']
        except requests.RequestException as error:
            logger.error(u'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CouchPotato: {}'.
                         format(error))
            return None


@restricted
def plain_text(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    output = ""
    try:
        with open('cache/cp_' + str(update.message.chat_id), 'rb') as cache:
            movies = pickle.load(cache)
    except OSError:
        output = "–ù–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"
        movies = ()
    if movies:
        movie_title = update.message.text[:-5]
        movie_year = int(update.message.text[-4:])
        for entry in movies:
            if movie_title in entry['titles'] and movie_year == entry['year']:
                logger.info("–§–∏–ª—å–º %s: %s –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ CouchPotato" %
                            (movie_title, str(movie_year)))
                output = add_movie(movie_title, entry['imdb'])

    # FIXME: output still can be None. "" also isn't good for send_message's text parameter.
    bot.send_message(chat_id=update.message.chat_id,
                     text=output if output else "None",
                     parse_mode=ParseMode.HTML,
                     reply_markup=ReplyKeyboardRemove())


def add_movie(movie_title, movie_id):
    media_list = CP.api_request('media.list', '')
    logger.info("Couchpotato –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º —É–∂–µ –≤ –µ–µ –±–∞–∑–µ: " +
                movie_title + " IMDB ID:" + movie_id)
    if media_list:
        for sublist in media_list['movies']:
            if movie_id == sublist['identifiers']['imdb']:
                error = u"Couchpotato –Ω–∞—à–ª–∞ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –≤ —Å–≤–æ–µ–π –±–∞–∑–µ. " + \
                        u"–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–∏—Å–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
                logger.warn(error)
                return error
        else:
            if CP.api_request('movie.add', '?identifier=' +
                              movie_id + '&amp;title=' + movie_title):
                output = u"–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞–∫–∞—á–∫—É " + \
                         u"<a href=\"http://imdb.com/title/" + \
                         movie_id + "\">" + movie_title + \
                         "</a>\nCouchpotato –ø–æ–ø—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ –µ–≥–æ –∏ —Å–∫–∞—á–∞–µ—Ç," + \
                         " –∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."
            else:
                output = u"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ –≤ CP (movie.add)"
            logger.info(output)
            return output
    else:
        logger.error(u"–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç media.list")


# If we encounter updater's error we will log it
def error(bot, update, error):
    logger.warn('Update "%s" caused error "%s"' % (update, error))


# /start command
@restricted
def start(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    bot.sendMessage(chat_id=update.message.chat_id,
                    text="–ü—Ä–∏–≤–µ—Ç, —è " + bot.username +
                    "! –ù–∞–±–µ—Ä–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏")
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")


# /help command
@restricted
def help(bot, update):
    help = """<b>/help</b> - –ü–æ–º–æ—â—å
<b>/q –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞</b> - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
<b>/ping</b> - –ü–∏–Ω–≥ –¥–æ –≥—É–≥–ª–∞
<b>/uptime</b> - –ê–ø—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞
<b>/free</b> - –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å
<b>/systemp</b> - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞

–ë–æ—Ç —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –µ—Å—Ç—å magnet-—Å—Å—ã–ª–∫–∏,
–∞ —Ç–∞–∫–∂–µ —Å–∞–º–∏ magnet-—Å—Å—ã–ª–∫–∏ –∏ torrent-—Ñ–∞–π–ª—ã
¬©2017, by @photopiter"""
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    bot.sendMessage(chat_id=update.message.chat_id,
                    text=help, parse_mode=ParseMode.HTML)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /help")


# /ping command
# This command is win/*nix compatible
@restricted
def ping(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    output = u"–ü–∏–Ω–≥ –¥–æ –≥—É–≥–ª–∞: " + str(do_ping("8.8.4.4", 2)) + u"–º—Å."
    bot.sendMessage(chat_id=update.message.chat_id, text=output)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /ping")


# /uptime command
# This command is win/*nix compatible
# 'net stats srv' used @ windows systems
@restricted
def uptime(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    if platform.system() == "Windows":
        uptime = subprocess.check_output('net stats srv', shell=True)
        matches = re.match('.*(\d{2}.\d{2}.\d{4}).*',
                           str(uptime), re.DOTALL)
        uptime = matches.group(1)
        start_date = datetime.date(datetime.strptime(uptime, '%d.%m.%Y'))
        current_date = date.today()
        uptime = str(current_date - start_date)
    else:
        uptime = subprocess.check_output('uptime -p', shell=True)
    bot.sendMessage(chat_id=update.message.chat_id,
                    text=u'–ê–ø—Ç–∞–π–º: ' + uptime.decode('utf-8'))
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" + str(update.message.chat_id) +
                " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /uptime")


@restricted
def free(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    if platform.system() == "Windows":
        # TODO: Format output
        mem = subprocess.check_output('wmic OS get FreePhysicalMemory /Value',
                                      shell=True)
        hdd = subprocess.check_output('wmic /node:"%COMPUTERNAME%" LogicalDisk Where DriveType="3" Get DeviceID,FreeSpace',
                                      shell=True)
    else:
        mem = subprocess.check_output(r'free -m | sed -n "s/^Mem:\s\+[0-9]\+\s\+\([0-9]\+\)\s.\+/\1/p"',
                                      shell=True).decode('utf-8')
        hdd = subprocess.check_output(r"df -h | sed -n 4p | awk '{ print $4 }'",
                                      shell=True).decode('utf-8')
    output = "Free RAM, Mb: " + str(mem) + "Free Disk: " + str(hdd)
    bot.sendMessage(chat_id=update.message.chat_id, text=output)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /free")


@restricted
def systemp(bot, update):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    if platform.system() == "Windows":
        output = u"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—Ç " + \
                 u"–∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ " + platform.system()
    else:
        output = subprocess.check_output(r'sensors | sed -ne "s/ Temp: \+[-+]\([0-9]\+\).*/: \1¬∞C/p"',
                                         shell=True).decode('utf-8')
    bot.sendMessage(chat_id=update.message.chat_id, text=output)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" + str(update.message.chat_id) +
                " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /systemp")


@restricted
def http_parse(bot, update, direct=True):
    import requests
    t = update.message.text
    matches = re.match('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',
                       t, re.DOTALL)
    url = matches.group(0)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" + str(update.message.chat_id) +
                " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É " + url)
    logger.info('–ò—â–µ–º magnet-—Å—Å—ã–ª–∫—É –ø–æ URL: ' + url)
    r = requests.get(url)
    magnet = re.search('href=[\'"]?(magnet[^\'" >]+)', r.text, re.DOTALL)
    if magnet.group(1):
        logger.info(u"Magnet-—Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        output = magnet_save(magnet.group(1))
        if not output:
            output = u"Magnet-—Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ " + \
                     u"–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Windows"
            logger.warn(output)
        else:
            logger.info(u"Magnet-—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        output = u'Magnet-—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —Å—Å—ã–ª–∫–µ.'
        logger.warn(u"Magnet-—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:" + url)
    bot.sendMessage(chat_id=update.message.chat_id, text=output)


@restricted
def magnet_parse(bot, update, direct=True):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª Magnet-—Å—Å—ã–ª–∫—É")
    output = magnet_save(update.message.text)
    bot.sendMessage(chat_id=update.message.chat_id, text=output)


@restricted
def torrent_save(bot, update, direct=True):
    bot.sendChatAction(chat_id=update.message.chat_id,
                       action=ChatAction.TYPING)
    logger.info(u"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" +
                str(update.message.chat_id) + " –æ—Ç–ø—Ä–∞–≤–∏–ª torrent-—Ñ–∞–π–ª")
    f = update.message.document
    torrent_file = bot.getFile(f.file_id)
    if torrent_file.download(Settings.torrent_path + f.file_name):
        output = f.file_name + u' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –∑–∞–∫–∞—á–∫—É.'
        logger.info(output)
    else:
        output = u'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ torrent-—Ñ–∞–π–ª–∞.'
        logger.warn(output)
    bot.sendMessage(chat_id=update.message.chat_id, text=output)


def magnet_save(magnet):
    if platform.system() == "Windows":
        return False
    import libtorrent
    timeout = 30
    params = libtorrent.parse_magnet_uri(magnet)
    session = libtorrent.session()
    handle = session.add_torrent(params)
    timeout_value = timeout

    while not handle.has_metadata():
        time.sleep(0.1)
        timeout_value -= 0.1
        if timeout_value <= 0:
            logger.error(u'–¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ %s —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ \
                         –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ —Å DHT/—Ç—Ä–µ–∫–µ—Ä–æ–≤.',
                         timeout)
            return u'–¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ \
                         –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ —Å DHT/—Ç—Ä–µ–∫–µ—Ä–æ–≤.'.format(timeout)
        else:
            return u'Magnet-—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –∑–∞–∫–∞—á–∫—É'

    torrent_info = handle.get_torrent_info()
    torrent_file = libtorrent.create_torrent(torrent_info)
    with open(Settings.torrent_path + torrent_info.name() +
              ".torrent", "wb") as f:
        f.write(libtorrent.bencode(torrent_file.generate()))
    f.close()


def unknown(bot, update):
    bot.sendMessage(chat_id=update.message.chat_id,
                    text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–º–æ—â—å: /help')


# Build Menu Helper
def build_menu(buttons: list,
               n_cols: int,
               header_buttons: list = None,
               footer_buttons: list = None):
    menu = list()
    for i in range(0, len(buttons)):
        item = buttons[i]
        if i % n_cols == 0:
            menu.append([item])
        else:
            menu[int(i / n_cols)].append(item)
    if header_buttons:
        menu.insert(0, header_buttons)
    if header_buttons:
        menu.append(footer_buttons)
    return menu


# Internal function to do ping
def do_ping(hostname, timeout):
    if platform.system() == "Windows":
        command = "ping " + hostname + " -n 1 -w " + str(timeout * 1000)
        pattern = '.*xef=([0-9]+).*'
    else:
        command = "ping -i " + str(timeout) + " -c 1 " + hostname
        pattern = '.*time=([0-9]+\.[0-9]+) ms.*'
    proccess = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    matches = re.match(pattern,
                       str(proccess.stdout.read().decode('utf-8')), re.DOTALL)
    if matches:
        return matches.group(1)
    else:
        return False


def Filter(f):
    def filter_wrapper(self, message):
        return f(self, message)
    return type(f.__name__, (BaseFilter,), {'__call__': filter_wrapper})()


@Filter
def torrent_file(self, message):
    t = message.document
    return bool(t and t.mime_type == 'application/x-bittorrent')


@Filter
def magnet(self, message):
    return bool(message.text and message.text.startswith('magnet'))


@Filter
def http_link(self, message):
    return bool(message.text and message.text.startswith('http'))


# Start point. Here we go
def main():
    # Updater Initialization
    logger.info(u"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    u = Updater(token=Settings.token)
    logger.info(u"–ê–ø–¥–µ–π—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    dp = u.dispatcher

    # Initialize handlers
    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help)
    ping_handler = CommandHandler('ping', ping)
    uptime_handler = CommandHandler('uptime', uptime)
    free_handler = CommandHandler('free', free)
    systemp_handler = CommandHandler('systemp', systemp)
    cp_query_handler = CommandHandler('q', CP.query)
    cp_avail_handler = CommandHandler('avail', CP.avail)
    magnet_handler = MessageHandler(magnet, magnet_parse)
    http_handler = MessageHandler(http_link, http_parse)
    torrent_file_handler = MessageHandler(torrent_file, torrent_save)
    plaintext_handler = MessageHandler(Filters.text, plain_text)
    unknown_handler = MessageHandler(Filters.command, unknown)
    button_handler = CallbackQueryHandler(CP.button)

    logger.info(u"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–∞—Ç—á–µ—Ä–æ–≤")
    # Initialize dispatchers for commands
    dp.add_handler(start_handler)
    dp.add_handler(help_handler)
    dp.add_handler(ping_handler)
    dp.add_handler(uptime_handler)
    dp.add_handler(systemp_handler)
    dp.add_handler(free_handler)
    dp.add_handler(button_handler)

    # Dispatchers for text commands without /
    # This is http and magnet: links, also text for couchpotato finder
    dp.add_handler(magnet_handler)
    dp.add_handler(http_handler)
    dp.add_handler(torrent_file_handler)
    dp.add_handler(plaintext_handler)

    # Dispatchers for couchpotato
    dp.add_handler(cp_query_handler)
    dp.add_handler(cp_avail_handler)

    # Also for unknown command
    dp.add_handler(unknown_handler)

    # Log errors
    dp.add_error_handler(error)

    logger.info(u"–ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π === –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    # Start polling
    u.start_polling()
    # Run the bot until the you presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    u.idle()


if __name__ == '__main__':
    main()
